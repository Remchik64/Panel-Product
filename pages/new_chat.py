import streamlit as st
import requests
import json
import os
from PIL import Image
import hashlib
from utils.utils import verify_user_access, update_remaining_generations, get_data_file_path
from utils.chat_database import ChatDatabase
from tinydb import TinyDB, Query
from googletrans import Translator
from datetime import datetime
from utils.page_config import setup_pages
import time
from utils.translation import translate_text, display_message_with_translation
from flowise import Flowise, PredictionData
import uuid
from langdetect import detect
from utils.database.database_manager import get_database

def generate_response(prompt: str, chat_id: str, session_id: str):
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Flowise, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        if not hasattr(st.session_state, 'flowise_client'):
            base_url = st.secrets["flowise"]["base_url"].replace('/api/v1/prediction', '')
            st.session_state.flowise_client = Flowise(base_url=base_url)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            prediction_data = PredictionData(
                question=prompt,
                chatId=chat_id,
                sessionId=session_id,
                overrideConfig={}
            )
            
            response = st.session_state.flowise_client.predict(
                chat_id,
                prediction_data
            )
            
            if isinstance(response, dict):
                text_response = response.get('text', '')
            else:
                text_response = str(response)
            
            if text_response:
                try:
                    detected_lang = detect(text_response)
                    if detected_lang == 'en':
                        translator = Translator()
                        translated = translator.translate(text_response, dest='ru')
                        if translated and translated.text:
                            return translated.text
                        else:
                            return text_response
                    else:
                        return text_response
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")
                    return text_response
            
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    
        except Exception as e:
            if "Unknown model" in str(e):
                return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞."
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
            
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

# –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = get_database()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
setup_pages()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if "authenticated" not in st.session_state or not st.session_state.authenticated:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.stop()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Flowise
if "flowise" not in st.secrets or "base_url" not in st.secrets["flowise"]:
    st.error("–û—à–∏–±–∫–∞: URL Flowise API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ secrets.toml")
    st.stop()

# –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ –æ—Ç /api/v1/prediction
base_url = st.secrets["flowise"]["base_url"].replace('/api/v1/prediction', '')

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Flowise
flowise_client = Flowise(base_url=base_url)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if "session_id" not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())
    st.session_state.messages = []
else:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if "messages" not in st.session_state:
        st.session_state.messages = []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–π —Å–µ—Å—Å–∏–π
HISTORY_DIR = os.path.join(os.path.dirname(__file__), '..', 'chat_history')
if not os.path.exists(HISTORY_DIR):
    os.makedirs(HISTORY_DIR)

def get_session_display_name(username: str, flow_id: str, session_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å–µ—Å—Å–∏–∏"""
    session = db.chat_sessions.find_one({
        "username": username,
        "flow_id": flow_id,
        "session_id": session_id
    })
    return session.get("name", f"–°–µ—Å—Å–∏—è {session_id[:8]}") if session else f"–°–µ—Å—Å–∏—è {session_id[:8]}"

def save_session_history(username: str, flow_id: str, session_id: str, messages: list, display_name: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –≤ MongoDB"""
    if not display_name:
        display_name = f"–°–µ—Å—Å–∏—è {len(get_available_sessions(username, flow_id)) + 1}"
    
    db.chat_history.update_one(
        {
            "username": username,
            "flow_id": flow_id,
            "session_id": session_id
        },
        {
            "$set": {
                "messages": messages,
                "updated_at": datetime.now()
            }
        },
        upsert=True
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    db.chat_sessions.update_one(
        {
            "username": username,
            "flow_id": flow_id,
            "session_id": session_id
        },
        {
            "$set": {
                "name": display_name,
                "updated_at": datetime.now()
            },
            "$setOnInsert": {
                "created_at": datetime.now()
            }
        },
        upsert=True
    )

def load_session_history(username: str, flow_id: str, session_id: str) -> list:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –∏–∑ MongoDB"""
    history = db.chat_history.find_one({
        "username": username,
        "flow_id": flow_id,
        "session_id": session_id
    })
    return history.get("messages", []) if history else []

def get_available_sessions(username: str, flow_id: str) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —á–∞—Ç–∞"""
    sessions = list(db.chat_sessions.find({
        "username": username,
        "flow_id": flow_id
    }).sort("created_at", 1))
    
    return [{
        'id': session['session_id'],
        'display_name': session.get('name', f"–°–µ—Å—Å–∏—è {session['session_id'][:8]}")
    } for session in sessions]

def rename_session(username: str, flow_id: str, session_id: str, new_name: str):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é"""
    try:
        db.chat_sessions.update_one(
            {
                "username": username,
                "flow_id": flow_id,
                "session_id": session_id
            },
            {
                "$set": {
                    "name": new_name,
                    "updated_at": datetime.now()
                }
            }
        )
        st.success(f"–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_name}'")
        st.rerun()
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return False

def delete_session(username: str, flow_id: str, session_id: str):
    """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        db.chat_sessions.delete_one({
            "username": username,
            "flow_id": flow_id,
            "session_id": session_id
        })
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        db.chat_history.delete_one({
            "username": username,
            "flow_id": flow_id,
            "session_id": session_id
        })
        
        # –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
        if ('current_chat_flow' in st.session_state and 
            'current_session' in st.session_state.current_chat_flow and 
            st.session_state.current_chat_flow['current_session'] == session_id):
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–µ—Å—Å–∏–π
            available_sessions = get_available_sessions(username, flow_id)
            
            if available_sessions:
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Å—Å–∏—é
                st.session_state.current_chat_flow['current_session'] = available_sessions[0]['id']
            else:
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                new_session_id = str(uuid.uuid4())
                st.session_state.current_chat_flow['current_session'] = new_session_id
                save_session_history(username, flow_id, new_session_id, [])
        
        st.rerun()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")

def clear_session_history(username: str, flow_id: str, session_id: str):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
    try:
        db.chat_history.update_one(
            {
                "username": username,
                "flow_id": flow_id,
                "session_id": session_id
            },
            {
                "$set": {
                    "messages": [],
                    "updated_at": datetime.now()
                }
            }
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        st.session_state.messages = []
        st.rerun()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def get_message_hash(role, content):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö—ç—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return hashlib.md5(f"{role}:{content}".encode()).hexdigest()

def get_user_profile_image(username):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = db.get_user(username)
    if user_data and user_data.get('profile_image'):
        try:
            return Image.open(user_data['profile_image'])
        except Exception:
            return "üë§"
    return "üë§"

def display_message(message, role):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    avatar = "ü§ñ" if role == "assistant" else get_user_profile_image(st.session_state.username)
    with st.chat_message(role, avatar=avatar):
        st.markdown(message["content"])

def save_chat_flow(username, flow_id, flow_name=None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞"""
    if not flow_name:
        flow_name = f"–ß–∞—Ç {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    session_id = str(uuid.uuid4())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç-–ø–æ—Ç–æ–∫–µ
    db.chat_sessions.insert_one({
        "username": username,
        "flow_id": flow_id,
        "session_id": session_id,
        "name": flow_name,
        "created_at": datetime.now(),
        "updated_at": datetime.now()
    })
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.users.update_one(
        {"username": username},
        {
            "$push": {
                "chat_flows": {
                    "id": flow_id,
                    "name": flow_name,
                    "created_at": datetime.now(),
                    "current_session": session_id
                }
            }
        }
    )
    
    return True

def get_user_chat_flows(username):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç-–ø–æ—Ç–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.get_user(username)
    return user.get('chat_flows', []) if user else []

def delete_chat_flow(username, flow_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
        db.chat_sessions.delete_many({
            "username": username,
            "flow_id": flow_id
        })
        
        # –£–¥–∞–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        db.chat_history.delete_many({
            "username": username,
            "flow_id": flow_id
        })
        
        # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.users.update_one(
            {"username": username},
            {"$pull": {"chat_flows": {"id": flow_id}}}
        )
        
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")
        return False

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
user_data = db.get_user(st.session_state.username)
if user_data:
    remaining_generations = user_data.get('remaining_generations', 0)
    st.sidebar.metric("–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", remaining_generations)
    
    if remaining_generations <= 0:
        st.error("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.")
        st.stop()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞–º–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞–º–∏")

# –í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞
chat_flows = get_user_chat_flows(st.session_state.username)
if chat_flows:
    flow_names = [flow['name'] for flow in chat_flows]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    current_index = 0
    if 'current_chat_flow' in st.session_state:
        try:
            current_flow_name = st.session_state.current_chat_flow['name']
            if current_flow_name in flow_names:
                current_index = flow_names.index(current_flow_name)
        except:
            current_index = 0
    
    selected_flow_name = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",
        flow_names,
        index=current_index
    )
    
    selected_flow = next(
        (flow for flow in chat_flows if flow['name'] == selected_flow_name),
        chat_flows[0]
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
    if ('current_chat_flow' not in st.session_state or 
        st.session_state.current_chat_flow['id'] != selected_flow['id']):
        st.session_state.current_chat_flow = selected_flow
        if "message_hashes" in st.session_state:
            del st.session_state.message_hashes
        st.rerun()

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞
st.sidebar.markdown("---")
with st.sidebar.expander("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"):
    new_flow_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:")
    new_flow_id = st.text_input(
        "ID —á–∞—Ç-–ø–æ—Ç–æ–∫–∞:",
        help="–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ —Å–±–æ—Ä–∫—É –≤ https://t.me/startintellect"
    )
    
    if st.button("–°–æ–∑–¥–∞—Ç—å") and new_flow_id:
        if save_chat_flow(st.session_state.username, new_flow_id, new_flow_name):
            st.session_state.current_chat_flow = {
                'id': new_flow_id,
                'name': new_flow_name or f"–ß–∞—Ç {len(chat_flows) + 1}"
            }
            st.success("–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω!")
            st.rerun()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏–º —á–∞—Ç–æ–º
if 'current_chat_flow' in st.session_state:
    st.title(f"üí¨ {st.session_state.current_chat_flow['name']}")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
    available_sessions = get_available_sessions(
        st.session_state.username,
        st.session_state.current_chat_flow['id']
    )
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        if available_sessions:
            session_map = {session['display_name']: session['id'] for session in available_sessions}
            display_names = list(session_map.keys())
            
            current_display_name = next(
                (session['display_name'] for session in available_sessions 
                 if session['id'] == st.session_state.current_chat_flow.get('current_session')),
                display_names[0] if display_names else None
            )
            
            selected_display_name = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é:",
                display_names,
                index=display_names.index(current_display_name) if current_display_name in display_names else 0
            )
            
            selected_session_id = session_map[selected_display_name]
            
            if selected_session_id != st.session_state.current_chat_flow.get('current_session'):
                st.session_state.current_chat_flow['current_session'] = selected_session_id
                st.rerun()
    
    with col2:
        st.markdown(
            """
            <style>
            div[data-testid="column"] button {
                width: 100%;
                margin: 5px 0;
                min-height: 45px;
            }
            </style>
            """, 
            unsafe_allow_html=True
        )
        
        if st.button("üí´ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è"):
            new_session_id = str(uuid.uuid4())
            st.session_state.current_chat_flow['current_session'] = new_session_id
            save_session_history(
                st.session_state.username,
                st.session_state.current_chat_flow['id'],
                new_session_id,
                []
            )
            st.rerun()
        
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å"):
            clear_session_history(
                st.session_state.username,
                st.session_state.current_chat_flow['id'],
                st.session_state.current_chat_flow['current_session']
            )
        
        if st.button("üóë –£–¥–∞–ª–∏—Ç—å"):
            delete_session(
                st.session_state.username,
                st.session_state.current_chat_flow['id'],
                st.session_state.current_chat_flow['current_session']
            )
    
    st.markdown("---")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if 'current_session' in st.session_state.current_chat_flow:
        messages = load_session_history(
            st.session_state.username,
            st.session_state.current_chat_flow['id'],
            st.session_state.current_chat_flow['current_session']
        )
        
        for message in messages:
            display_message(message, message["role"])
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_input = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        height=100,
        key="message_input",
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–¥–µ—Å—å..."
    )
    
    col1, col2, col3 = st.columns(3)
    with col1:
        send_button = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", use_container_width=True)
    with col2:
        clear_button = st.button("–û—á–∏—Å—Ç–∏—Ç—å", on_click=lambda: setattr(st.session_state, 'message_input', ''), use_container_width=True)
    with col3:
        cancel_button = st.button("–û—Ç–º–µ–Ω–∏—Ç—å", on_click=lambda: setattr(st.session_state, 'message_input', ''), use_container_width=True)
    
    if send_button and user_input and user_input.strip():
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages = load_session_history(
            st.session_state.username,
            st.session_state.current_chat_flow['id'],
            st.session_state.current_chat_flow['current_session']
        )
        
        user_message = {
            "role": "user",
            "content": user_input,
            "timestamp": datetime.now().isoformat()
        }
        messages.append(user_message)
        
        save_session_history(
            st.session_state.username,
            st.session_state.current_chat_flow['id'],
            st.session_state.current_chat_flow['current_session'],
            messages
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        with st.chat_message("assistant", avatar="ü§ñ"):
            response = generate_response(
                user_input,
                st.session_state.current_chat_flow['id'],
                st.session_state.current_chat_flow['current_session']
            )
            st.write(response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant_message = {
            "role": "assistant",
            "content": response,
            "timestamp": datetime.now().isoformat()
        }
        messages.append(assistant_message)
        
        save_session_history(
            st.session_state.username,
            st.session_state.current_chat_flow['id'],
            st.session_state.current_chat_flow['current_session'],
            messages
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        db.users.update_one(
            {"username": st.session_state.username},
            {"$inc": {"remaining_generations": -1}}
        )
        
        st.rerun()

else:
    st.info("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def display_timer():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä"""
    placeholder = st.empty()
    for seconds in range(60):
        time_str = f"‚è±Ô∏è {seconds}—Å"
        placeholder.markdown(f"""
            <div style='animation: blink 1s infinite'>
                {time_str}
            </div>
            <style>
                div {{
                    font-size: 1.2em;
                    font-weight: bold;
                    color: #1E88E5;
                    padding: 10px;
                    border-radius: 8px;
                    background-color: #E3F2FD;
                    text-align: center;
                }}
                @keyframes blink {{
                    0%, 100% {{ opacity: 1.0 }}
                    50% {{ opacity: 0.5 }}
                }}
            </style>
        """, unsafe_allow_html=True)
        time.sleep(1)
        if not st.session_state.get('waiting_response', True):
            break
    placeholder.empty()