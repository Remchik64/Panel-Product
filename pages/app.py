import streamlit as st
import requests
import json
import os
from PIL import Image
import hashlib
import base64
import mimetypes
from datetime import datetime
from googletrans import Translator
from utils.page_config import setup_pages
import time
from utils.translation import translate_text, display_message_with_translation
from flowise import Flowise, PredictionData
import uuid
from utils.database.database_manager import get_database

# –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = get_database()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
setup_pages()

def get_available_sessions(username: str, flow_id: str) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π —á–∞—Ç–∞"""
    return db.get_chat_sessions(username, flow_id)

def rename_session(username: str, flow_id: str, session_id: str, new_name: str):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
    db.chat_sessions.update_one(
        {
            "username": username,
            "flow_id": flow_id,
            "session_id": session_id
        },
        {
            "$set": {
                "name": new_name,
                "updated_at": datetime.now()
            }
        }
    )

def delete_session(username: str, flow_id: str, session_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
    db.chat_sessions.delete_one({
        "username": username,
        "flow_id": flow_id,
        "session_id": session_id
    })
    
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    db.chat_history.delete_one({
        "username": username,
        "flow_id": flow_id,
        "session_id": session_id
    })

def clear_session_history(username: str, flow_id: str, session_id: str):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏"""
    db.chat_history.update_one(
        {
            "username": username,
            "flow_id": flow_id,
            "session_id": session_id
        },
        {
            "$set": {
                "messages": [],
                "updated_at": datetime.now()
            }
        }
    )

def get_message_hash(role, content):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ö—ç—à–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return hashlib.md5(f"{role}:{content}".encode()).hexdigest()

def get_user_profile_image(username):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = db.get_user(username)
    if user_data and "profile_image" in user_data:
        return user_data["profile_image"]
    return None

def display_message(message, role):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
    display_message_with_translation(message, role)

def save_chat_flow(username, flow_id, flow_name=None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —á–∞—Ç–∞"""
    if not flow_name:
        flow_name = f"–ß–∞—Ç {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    
    session_id = str(uuid.uuid4())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    db.chat_sessions.insert_one({
        "username": username,
        "flow_id": flow_id,
        "session_id": session_id,
        "name": flow_name,
        "created_at": datetime.now(),
        "updated_at": datetime.now()
    })
    
    return session_id

def get_user_chat_flows(username):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return db.chat_sessions.find({"username": username})

def generate_response(prompt: str, chat_id: str, session_id: str, uploaded_files=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏"""
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        prediction_data = PredictionData(
            question=prompt,
            chat_id=chat_id,
            session_id=session_id,
            files=uploaded_files
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Flowise
        flowise = Flowise()
        response = flowise.predict(prediction_data)
        
        if response and "text" in response:
            return response["text"]
        else:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

def submit_message(user_input, uploaded_files=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not user_input.strip():
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    current_flow = st.session_state.get("current_flow")
    current_session = st.session_state.get("current_session")
    
    if not current_flow or not current_session:
        st.error("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    messages = db.get_chat_history(
        st.session_state["username"],
        current_flow,
        current_session
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = {
        "role": "user",
        "content": user_input,
        "timestamp": datetime.now().isoformat(),
        "message_id": get_message_hash("user", user_input)
    }
    messages.append(user_message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    db.save_chat_history(
        st.session_state["username"],
        current_flow,
        current_session,
        messages
    )
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    files_data = []
    if uploaded_files:
        for file in uploaded_files:
            file_content = file.read()
            mime_type = mimetypes.guess_type(file.name)[0]
            
            if mime_type and mime_type.startswith('image/'):
                # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
                encoded_file = encode_file_to_base64(file_content)
                files_data.append({
                    "name": file.name,
                    "type": mime_type,
                    "content": encoded_file
                })
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    assistant_response = generate_response(
        user_input,
        current_flow,
        current_session,
        files_data if files_data else None
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    assistant_message = {
        "role": "assistant",
        "content": assistant_response,
        "timestamp": datetime.now().isoformat(),
        "message_id": get_message_hash("assistant", assistant_response)
    }
    messages.append(assistant_message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    db.save_chat_history(
        st.session_state["username"],
        current_flow,
        current_session,
        messages
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
    db.chat_sessions.update_one(
        {
            "username": st.session_state["username"],
            "flow_id": current_flow,
            "session_id": current_session
        },
        {
            "$set": {"updated_at": datetime.now()}
        }
    )

def encode_file_to_base64(file_content: bytes) -> str:
    """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ base64"""
    return base64.b64encode(file_content).decode('utf-8')
